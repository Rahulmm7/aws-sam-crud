AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  first-app

  Sample SAM Template for first-app

Parameters:
  StageName:
    Type: String
    Default: Dev

Globals:
  Function:
    Timeout: 5

Resources:
  ApiGatewayCrud:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref StageName
      Name: CrudApi
      Cors:
        AllowOrigin: "'*'"
        AllowMethods: "'*'"

  GetUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/getUser
      Handler: index.handler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      Events:
        getUser:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayCrud
            Path: /getUser/{id}
            Method: GET
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref usersTable

  LambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      CompatibleRuntimes:
        - nodejs14.x
      ContentUri: ./layers

  CreateUser:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: CreateUser
      CodeUri: lambda/createUser
      Handler: index.handler
      Runtime: nodejs14.x
      Layers:
        - !Ref LambdaLayer
      Architectures:
        - x86_64
      Events:
        createUSer:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayCrud
            Path: /createUser
            Method: POST
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref usersTable

  GetAllUser:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetAllUser
      CodeUri: lambda/getAllUser
      Handler: index.handler
      Runtime: nodejs14.x
      Layers:
        - !Ref LambdaLayer
      Architectures:
        - x86_64
      Events:
        createUser:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayCrud
            Path: /getAllUser
            Method: GET
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref usersTable

  UpdateUser:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: UpdateUser
      CodeUri: lambda/updateUser
      Handler: index.handler
      Runtime: nodejs14.x
      Layers:
        - !Ref LambdaLayer
      Architectures:
        - x86_64
      Events:
        createUser:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayCrud
            Path: /updateUser/{id}
            Method: PUT
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref usersTable
  DeleteUser:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DeleteUser
      CodeUri: lambda/deleteUser
      Handler: index.handler
      Runtime: nodejs14.x
      Layers:
        - !Ref LambdaLayer
      Architectures:
        - x86_64
      Events:
        deleteUser:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayCrud
            Path: /deleteUser/{id}
            Method: DELETE
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref usersTable

  usersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: userDB
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_IMAGE

Outputs:
  ApiOutput:
    Description: "api url"
    Value: !Sub "https://${ApiGatewayCrud}.execute-api.${AWS::Region}.amazonaws.com/${StageName}"
  LayerOutput:
    # Value: !Ref LambdaLayer
    Value: !Sub "${LambdaLayer}"
